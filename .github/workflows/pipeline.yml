name: Deploy Next.js App to EKS

# This workflow is triggered on pushes to the 'eks_cluster' branch, excluding changes to the README.md file
on:
  push:
    branches:
      - 'eks_cluster'
    paths-ignore:
      - 'README.md'

# Sets the permissions
permissions:
  id-token: write  # Allows the workflow to write an OIDC ID token to interact with AWS services
  contents: read   # Allows the workflow to read the repository content

# Environment variables used throughout the workflow
env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  IMAGE_TAG: ${{ secrets.AWS_REPO_URI }}:${{ github.sha }}
  K8S_DEPLOYMENT_NAME: kaif-app

jobs:
  # The 'build' job builds the Docker image and pushes it to AWS ECR
  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      # Configure AWS credentials using the AWS ARN role from secrets to access AWS services
      - name: Configure AWS creds for ECR
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ARN_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
      
      # Build the Docker image and push it to AWS ECR
      - name: Build and Push Docker image to AWS ECR
        run: |
          docker build -t "${{ env.IMAGE_TAG }}" .
          aws ecr get-login-password | docker login --username AWS --password-stdin ${{ secrets.AWS_REPO_URI }}
          docker push "${{ env.IMAGE_TAG }}"
          echo "✅ Docker image ${{ env.IMAGE_TAG }} has been pushed to AWS ECR" >> $GITHUB_STEP_SUMMARY
      
      # Upload the Kubernetes deployment manifest as an artifact for the next job to use
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: deployment-manifest
          path: ./deployment.yaml

  # The 'deploy' job downloads the artifact and deploys it to the EKS cluster
  deploy:
    needs: build
    runs-on: ubuntu-22.04
    steps:      
      # Download the Kubernetes deployment manifest artifact
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: deployment-manifest
          path: .
      
      # Setup AWS credentials in the environment variables for the kubectl commands  !!!!! DO NOT THIS FOR PROD
      - name: Set up AWS credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ env.AWS_REGION }}" >> $GITHUB_ENV

      # Configure kubeconfig to interact with the EKS cluster
      - name: Configure Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          aws eks --region us-east-1 update-kubeconfig --name kaif-app-eks
          cat $HOME/.kube/config

      # Apply the deployment manifest to the EKS cluster and check the rollout status
      - name: Deploy to Kubernetes
        run: |
          export IMAGE=${{ secrets.AWS_REPO_URI }}:${{ github.sha }}
          envsubst < deployment.yaml | kubectl apply -f -
          kubectl rollout status deployment/kaif-app
          echo "✅ Deployment kaif-app has been updated" >> $GITHUB_STEP_SUMMARY